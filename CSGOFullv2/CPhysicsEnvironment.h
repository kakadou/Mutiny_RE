#pragma once

class CPhysicsEnvironment
{
public:
	//note: these are not all voids fix whenever you need the functions
	struct objectparams_t;
	struct fluidparams_t;
	class IPhysicsFluidController;
	struct springparams_t;
	class IPhysicsSpring;
	class IPhysicsConstraintGroup;
	class IPhysicsConstraint;
	struct constraint_groupparams_t;
	struct constraint_ragdollparams_t;
	struct constraint_hingeparams_t;
	struct constraint_fixedparams_t;
	struct constraint_slidingparams_t;
	struct constraint_ballsocketparams_t;
	struct constraint_pulleyparams_t;
	struct constraint_lengthparams_t;
	class IPhysicsShadowController;
	class IPhysicsPlayerController;
	class IMotionEvent;
	class IPhysicsMotionController;
	struct vehicleparams_t;
	class IPhysicsGameTrace;
	class IPhysicsVehicleController;
	class IPhysicsCollisionSolver;
	class IPhysicsCollisionEvent;
	class IPhysicsObjectEvent;
	class IPhysicsConstraintEvent;
	class IPhysicsEnvironment;
	struct physsaveparams_t;
	struct physprerestoreparams_t;
	struct physrestoreparams_t;
	class IPhysicsTraceFilter;
	struct physics_performanceparams_t;
	struct physics_stats_t;
	struct constraint_limitedhingeparams_t;
	class Vector;
	class QAngle;
	class CPhysCollide;
	class IPhysicsObject;
	class CGameTrace;
	struct Ray_t;

	virtual ~CPhysicsEnvironment();
	virtual void SetDebugOverlay(void * (*)(char const*, int *));
	virtual void GetDebugOverlay(void);
	virtual void SetGravity(Vector const&);
	virtual void GetGravity(Vector *)const;
	virtual void SetAirDensity(float);
	virtual void GetAirDensity(void)const;
	virtual void CreatePolyObject(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t *);
	virtual void CreatePolyObjectStatic(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t *);
	virtual void CreateSphereObject(float, int, Vector const&, QAngle const&, objectparams_t *, bool);
	virtual void DestroyObject(IPhysicsObject *);
	virtual void CreateFluidController(IPhysicsObject *, fluidparams_t *);
	virtual void DestroyFluidController(IPhysicsFluidController *);
	virtual void CreateSpring(IPhysicsObject *, IPhysicsObject *, springparams_t *);
	virtual void DestroySpring(IPhysicsSpring *);
	virtual void CreateRagdollConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_ragdollparams_t const&);
	virtual void CreateHingeConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_hingeparams_t const&);
	virtual void CreateFixedConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_fixedparams_t const&);
	virtual void CreateSlidingConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_slidingparams_t const&);
	virtual void CreateBallsocketConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_ballsocketparams_t const&);
	virtual void CreatePulleyConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_pulleyparams_t const&);
	virtual void CreateLengthConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_lengthparams_t const&);
	virtual void DestroyConstraint(IPhysicsConstraint *);
	virtual void CreateConstraintGroup(constraint_groupparams_t const&);
	virtual void DestroyConstraintGroup(IPhysicsConstraintGroup *);
	virtual void CreateShadowController(IPhysicsObject *, bool, bool);
	virtual void DestroyShadowController(IPhysicsShadowController *);
	virtual void CreatePlayerController(IPhysicsObject *);
	virtual void DestroyPlayerController(IPhysicsPlayerController *);
	virtual void CreateMotionController(IMotionEvent *);
	virtual void DestroyMotionController(IPhysicsMotionController *);
	virtual void CreateVehicleController(IPhysicsObject *, vehicleparams_t const&, unsigned int, IPhysicsGameTrace *);
	virtual void DestroyVehicleController(IPhysicsVehicleController *);
	virtual void SetCollisionSolver(IPhysicsCollisionSolver *);
	virtual void Simulate(float);
	virtual void IsInSimulation(void)const;
	virtual void GetSimulationTimestep(void)const;
	virtual void SetSimulationTimestep(float);
	virtual void GetSimulationTime(void)const;
	virtual void ResetSimulationClock(void);
	virtual void GetNextFrameTime(void)const;
	virtual void SetCollisionEventHandler(IPhysicsCollisionEvent *);
	virtual void SetObjectEventHandler(IPhysicsObjectEvent *);
	virtual void SetConstraintEventHandler(IPhysicsConstraintEvent *);
	virtual void SetQuickDelete(bool);
	virtual void GetActiveObjectCount(void)const;
	virtual void GetActiveObjects(IPhysicsObject **)const;
	virtual void GetObjectList(int *)const;
	virtual void TransferObject(IPhysicsObject *, IPhysicsEnvironment *);
	virtual void CleanupDeleteList(void);
	virtual void EnableDeleteQueue(bool);
	virtual void Save(physsaveparams_t const&);
	virtual void PreRestore(physprerestoreparams_t const&);
	virtual void Restore(physrestoreparams_t const&);
	virtual void PostRestore(void);
	virtual void IsCollisionModelUsed(CPhysCollide *)const;
	virtual void TraceRay(Ray_t const&, unsigned int, IPhysicsTraceFilter *, CGameTrace *);
	virtual void SweepCollideable(CPhysCollide const*, Vector const&, Vector const&, QAngle const&, unsigned int, IPhysicsTraceFilter *, CGameTrace *);
	virtual void GetPerformanceSettings(physics_performanceparams_t *)const;
	virtual void SetPerformanceSettings(physics_performanceparams_t const*);
	virtual void ReadStats(physics_stats_t *);
	virtual void ClearStats(void);
	virtual void GetObjectSerializeSize(IPhysicsObject *)const;
	virtual void SerializeObjectToBuffer(IPhysicsObject *, unsigned char *, unsigned int);
	virtual void UnserializeObjectFromBuffer(void *, unsigned char *, unsigned int, bool);
	virtual void EnableConstraintNotify(bool);
	virtual void DebugCheckContacts(void);
	virtual void SetAlternateGravity(Vector const&);
	virtual void GetAlternateGravity(Vector *)const;
	virtual void GetDeltaFrameTime(int)const;
	virtual void ForceObjectsToSleep(IPhysicsObject **, int);
	virtual void SetPredicted(bool);
	virtual bool IsPredicted(void);
	virtual void SetPredictionCommandNum(int);
	virtual int GetPredictionCommandNum(void);
	virtual void DoneReferencingPreviousCommands(int);
	virtual void RestorePredictedSimulation(void);
	virtual void DestroyCollideOnDeadObjectFlush(CPhysCollide *);
	virtual void CreateLimitedHingeConstraint(IPhysicsObject *, IPhysicsObject *, IPhysicsConstraintGroup *, constraint_limitedhingeparams_t const&);
	virtual void ShouldQuickDelete(void)const;
	virtual void TraceBox(CGameTrace *, Vector const&, Vector const&, Vector const&, Vector const&);
};

extern CPhysicsEnvironment *physenv();